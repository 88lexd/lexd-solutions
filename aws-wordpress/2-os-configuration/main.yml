---
- hosts: masternode,workernode
  gather_facts: yes
  become: yes
  vars:
    # Allow connection from VPC CIDR but using security groups to control which server can access this NFS port
    k8s_cluster_subnet: "10.0.0.0/16"
    export_path: "/nfs/k8s"
    snap_microk8s_channel: "1.21/stable"
    # Get the latest version of Helm checking this URL: https://github.com/helm/helm/releases
    helm_binary_src: "https://get.helm.sh/helm-v3.7.0-rc.2-linux-amd64.tar.gz"
    k8s_mysql_secret_name: mysql-prod
    k8s_mysql_prod_password: !vault |
          $ANSIBLE_VAULT;1.1;AES256
          66656662623939316666643035363937646666356230393132623832306563623765356133373036
          6535303333323132636231346264626232376639343237370a646436396538373038623334353831
          38386362326331353633653935386131663836316363663561653731613032376331353330363532
          6237383137373531640a336162313762393632386262373833653236613861393763663335653537
          63363333383336393335663731316137333738643561333862313130313461613366
  tasks:
  - name: Apply base configuration
    include_tasks: ansible_tasks/base-config.yml

  - name: Setup AWS CloudWatch Agent
    include_tasks: ansible_tasks/setup-aws-cw-agent.yml

  - name: Install and configure MicroK8s
    include_tasks: ansible_tasks/setup-microk8s.yml

  - name: Setup NFS Server on Master Node
    include_tasks: ansible_tasks/setup-nfs-server.yml
    when: inventory_hostname == "masternode"

  - name: Create PROD namespace in the cluster
    kubernetes.core.k8s:
      state: present
      definition:
        apiVersion: v1
        kind: Namespace
        metadata:
          name: prod
    become_user: "{{ ansible_env.SUDO_USER }}"  # Use the standard user. This is where the Kubernetes Python module is installed.

  - name: Create DEV namespace in the cluster
    kubernetes.core.k8s:
      state: present
      definition:
        apiVersion: v1
        kind: Namespace
        metadata:
          name: dev
    become_user: "{{ ansible_env.SUDO_USER }}"  # Use the standard user. This is where the Kubernetes Python module is installed.

  - name: Create secret for the MySQL password in Dev
    kubernetes.core.k8s:
      state: present
      definition:
        apiVersion: v1
        kind: Secret
        metadata:
          name: mysql-password-dev
          namespace: dev
        type: Opaque
        data:
          password: "{{ k8s_mysql_prod_password | b64encode }}"
    become_user: "{{ ansible_env.SUDO_USER }}"  # Use the standard user. This is where the Kubernetes Python module is installed.
