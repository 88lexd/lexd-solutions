# This deployment is set to 0 replicas on purpose. It is only used when I need to develop the script.
# See: https://github.com/88lexd/lexd-solutions/tree/main/aws-wordpress/3-app-configuration/lets-encrypt-cron-img
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: lets-encrypt-deployment
spec:
  replicas: 0
  selector:
    matchLabels:
      app: lets-encrypt-cron-pod
  template:
    metadata:
      labels:
        app: lets-encrypt-cron-pod
    spec:
      serviceAccountName: {{ .Values.lets_encrypt.service_account_name }}
      automountServiceAccountToken: true
      containers:
      - image: 88lexd/lets-encrypt-cron:latest
        imagePullPolicy: Always
        name: lets-encrypt-cron
        command: ["python3"]
        args: ["/app/main.py", "--cluster-config"]
        env:
        - name: TZ
          value: {{ .Values.time_zone }}
        - name: LE_ACCOUNT_KEY_NAME
          value: {{ .Values.lets_encrypt.account_key_secret_name }}
        - name: LE_PRIVATE_KEY_NAME
          value: {{ .Values.lets_encrypt.pivate_key_secret_name }}
        - name: LE_CSR_CONFIGMAP_NAME
          value: {{ .Values.lets_encrypt.csr_configmap_name }}
        - name: LE_TLS_SECRET_NAME
          value: {{ .Values.wordpress.ingress_tls_secret_name }}
        - name: INGRESS_URL
          value: {{ .Values.wordpress.ingress_url }}
        volumeMounts:
        - name: wordpress-volume
          mountPath: "/var/www/html"  # Same directory as what the WordPress pods are using. This is where the challenge files will be stored
      volumes:
      - name: wordpress-volume
        persistentVolumeClaim:
          claimName: wordpress-local-pvc  # workaround while using local provisioner instead of EFS
          # claimName: wordpress-pvc  # Referencing "[PersistentVolumeClaim].metadata.name" in deployment-wordpress.yaml
