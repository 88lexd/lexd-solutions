# The tasks are based off the installation instructions outlined here:
# https://github.com/containerd/containerd/blob/main/docs/getting-started.md (Option 1)
---
- name: Install required library for seccomp
  ansible.builtin.apt:
    name: libseccomp2
    update_cache: yes
    state: present

- name: Check containerd status
  shell: |
    if [[ $(ps -A | grep containerd) ]]; then
        ps -Af | grep containerd | grep -v grep
    else
        echo "CONTAINERD_NOT_RUNNING"
    fi
  args:
    executable: /bin/bash
  register: containerd_status
  changed_when: False  # Task will return ok instead of changed

##################################
# Begin runc download and install
- name: Download runc
  ansible.builtin.get_url:
    url: "{{ runc_url }}"
    dest: "/tmp/{{ runc_url.split('/')[-1] }}"
  register: runc_tarball_dl
  when: containerd_status.stdout == "CONTAINERD_NOT_RUNNING"

- name: Install runc
  shell: "install -m 755 {{ runc_tarball_dl.dest }} /usr/local/sbin/runc"
  when: containerd_status.stdout == "CONTAINERD_NOT_RUNNING"
# End runc download and install

###########################################
# Begin download and install CNI plugins
- name: Download CNI plugins
  ansible.builtin.get_url:
    url: "{{ cni_plugins_url }}"
    dest: "/tmp/{{ cni_plugins_url.split('/')[-1] }}"
  register: cni_plugins_tarball_dl
  when: containerd_status.stdout == "CONTAINERD_NOT_RUNNING"

- name: Create directory for CNI plugin
  ansible.builtin.file:
    path: /opt/cni/bin
    state: directory
    # mode: '0755'
  when: containerd_status.stdout == "CONTAINERD_NOT_RUNNING"

- name: Extract CNI plugins tarball to /opt/cni/bin
  ansible.builtin.unarchive:
    src: "{{ cni_plugins_tarball_dl.dest }}"
    remote_src: yes
    dest: /opt/cni/bin
  when: containerd_status.stdout == "CONTAINERD_NOT_RUNNING"
# End download and install CNI plugins

#######################################
# Begin download and setup containerd
# Download then extract on purpose. This way I can inspect the tarball for any issues.
- name: Download containerd tarball
  ansible.builtin.get_url:
    url: "{{ containerd_tarball_url }}"
    dest: "/tmp/{{ containerd_tarball_url.split('/')[-1] }}"
  when: containerd_status.stdout == "CONTAINERD_NOT_RUNNING"
  register: containerd_tarball_dl

- name: Extract containerd tarball to /usr/local
  ansible.builtin.unarchive:
    src: "{{ containerd_tarball_dl.dest }}"
    remote_src: yes
    dest: /usr/local
  when: containerd_status.stdout == "CONTAINERD_NOT_RUNNING"
  register: containerd_unarchived

- name: Copy containerd.service to server
  ansible.builtin.copy:
    src: ./files/containerd.service
    dest: /usr/lib/systemd/system/containerd.service
  when: containerd_status.stdout == "CONTAINERD_NOT_RUNNING"

- name: Run daemon-reload
  ansible.builtin.systemd:
    daemon_reload: yes
  when: containerd_status.stdout == "CONTAINERD_NOT_RUNNING"

# sudo systemctl daemon-reload; sudo systemctl start containerd
- name: Enable and start containerd.service
  ansible.builtin.service:
    name: containerd.service
    enabled: yes
    state: restarted
  when: containerd_status.stdout == "CONTAINERD_NOT_RUNNING"
# End download and setup containerd

- name: Remove containerd tarball
  ansible.builtin.file:
    path: "{{ containerd_tarball_dl.dest }}"
    state: absent
  when: containerd_status.stdout == "CONTAINERD_NOT_RUNNING"

- name: Remove runc tarball
  ansible.builtin.file:
    path: "{{ runc_tarball_dl.dest }}"
    state: absent
  when: containerd_status.stdout == "CONTAINERD_NOT_RUNNING"

- name: Remove CNI plugins tarball
  ansible.builtin.file:
    path: "{{ cni_plugins_tarball_dl.dest }}"
    state: absent
  when: containerd_status.stdout == "CONTAINERD_NOT_RUNNING"
